{"version":3,"sources":["components/TodoForm.js","components/TodoFilter.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","useState","text","state","setState","datetime","date","getHours","getMinutes","getSeconds","getDate","getMonth","getFullYear","formSubmit","event","preventDefault","payload","id","shortid","generate","complete","onSubmit","class","name","value","onChange","target","placeholder","Button","style","width","variant","onClick","TodoFilter","filterText","ToDo","show","setShow","handleClose","Card","Body","Title","textDecoration","todo","Subtitle","className","Text","margin","toggleComplete","Modal","onHide","Header","closeButton","Footer","deleteTodo","TodoList","todos","display","filter","changeDisplay","args","Container","Date","data","length","newTodos","toLowerCase","indexOf","displayTodos","map","Todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.012c59c2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport shortid from 'shortid';\r\n\r\n// Bootstrap\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst TodoForm = props => {\r\n    // State for Bootstrap Modal\r\n    const [state, setState] = useState({ text: '' });\r\n    const formChange = (event) => {\r\n        setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    // Utility, get current time\r\n    const datetime =\"Time: \"\r\n        + props.date.getHours() + \":\"\r\n        + props.date.getMinutes() + \":\"\r\n        + props.date.getSeconds() + \" - Date: \" \r\n        + props.date.getDate() + \"/\"\r\n        + (props.date.getMonth() + 1) + \"/\"\r\n        + props.date.getFullYear();\r\n\r\n    // Return payload when the form is submitted\r\n    const formSubmit = event => {\r\n        event.preventDefault();\r\n        const payload = {\r\n            id: shortid.generate(),\r\n            text: state.text,\r\n            complete: false,\r\n            date:datetime\r\n        }\r\n        props.onSubmit(payload)\r\n        setState({ text: '' });\r\n    }\r\n\r\n    return (\r\n        <form class=\"d-flex m-1\" onSubmit={formSubmit}>\r\n            <input\r\n                class=\"form-control\"\r\n                name='text'\r\n                value={state.text}\r\n                onChange={formChange}\r\n                placeholder='todo...'\r\n            />\r\n            <Button style={{ width: '8rem' }} variant=\"secondary\" onClick={formSubmit}>Add ToDo</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default TodoForm;","import React, { useState } from 'react';\r\n\r\n// Bootstrap\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst TodoFilter = props => {\r\n    // State for checking text\r\n    const [state, setState] = useState({ filterText: '' })\r\n\r\n    // Alter the state onChange and return the value to parent\r\n    const changeFilter = (event) => {\r\n        setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n        props.onChange(event.target.value)\r\n    }\r\n\r\n    // Reset filter when submitted\r\n    const resetSubmit = event => {\r\n        event.preventDefault()\r\n        setState({ text: '' });\r\n        props.onChange('')\r\n    }\r\n\r\n    return (\r\n        <form class=\"d-flex m-1\">\r\n            <input\r\n                class=\"form-control\"\r\n                name='text'\r\n                value={state.text}\r\n                onChange={changeFilter}\r\n                placeholder='filter...'\r\n            />\r\n            <Button style={{ width: '8rem' }} variant=\"secondary\" onClick={resetSubmit}>Reset</Button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoFilter;","import React, { useState } from 'react';\r\n\r\n// Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\n\r\nconst ToDo = props => {\r\n    // State for Bootstrap Modal\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <div class= \"d-flex justify-content-center p-2\">\r\n            {/* Bootstrap Card Display */}\r\n            <Card style={{ width: '30rem' }}>\r\n                <Card.Body>\r\n                    <Card.Title><div style={{ textDecoration: props.todo.complete ? \"line-through\" : \"\" }}>\r\n                        {props.todo.text}</div></Card.Title>\r\n                    <Card.Subtitle className=\"mb-2 text-muted\">\r\n                        {props.todo.complete ? \"Completed\" : \"In Progress\"}</Card.Subtitle>\r\n                        <Card.Text>{props.todo.date}</Card.Text>\r\n                    <Button style={{ margin: '1rem',width: '5.5rem' }} variant=\"outline-success\" onClick={props.toggleComplete}>\r\n                        {props.todo.complete ? \"Uncheck\" : \"Check\"}\r\n                    </Button>\r\n                    <Button style={{ margin: '1rem',width: '5.5rem' }} variant=\"outline-danger\" onClick={handleShow}>\r\n                        Delete\r\n                    </Button>\r\n                </Card.Body>\r\n            </Card>\r\n            {/* Bootstrap Modal Display */}\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Delete Confirmation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure to delete the following ToDo item:</Modal.Body>\r\n                <Modal.Body>{props.todo.text}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n                    <Button variant=\"danger\" onClick={props.deleteTodo}>Delete</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ToDo;","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoFilter from './TodoFilter';\r\nimport Todo from './Todo';\r\n\r\n// Bootstrap\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Modal from 'react-bootstrap/Modal';\r\n/*\r\n  TodoMVC\r\n  1. add todo\r\n  2. display todos\r\n  3. cross off todo\r\n  4. show number of active todos\r\n  5. filter all/active/complete\r\n  6. delete todo\r\n  7. filter todo\r\n  8. delete all todo\r\n\r\n*/\r\n\r\nconst TodoList = () => {\r\n    // State used for storing and manipulating ToDo\r\n    const [state, setState] = useState({\r\n        todos: [],\r\n        display: \"all\",\r\n        filter: ''\r\n    });\r\n\r\n    // State for Bootstrap Modal\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    // Adding and Deleteing Todo List\r\n    const addTodo = todo => {\r\n        setState(state => ({\r\n            ...state,\r\n            todos: [todo, ...state.todos]\r\n        }));\r\n    }\r\n    const deleteTodo = id => {\r\n        setState({\r\n            ...state,\r\n            todos: state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n    // Delete all ToDo and alter Bootstrap Modal's state\r\n    const deleteAllTodo = () => {\r\n        setState({\r\n            todos: [],\r\n            display: 'all',\r\n            filter: ''\r\n        })\r\n        setShow(false)\r\n    }\r\n\r\n    // Altering complete state based on id\r\n    const toggleComplete = id => {\r\n        setState({\r\n            ...state,\r\n            todos: state.todos.map(todo => {\r\n                if (todo.id === id) {\r\n                    return {\r\n                        ...todo,\r\n                        complete: !todo.complete\r\n                    }\r\n                }\r\n                else {\r\n                    return todo\r\n                }\r\n            })\r\n        })\r\n    };\r\n\r\n    // Calculate number of ToDo with incomplete state\r\n    const checkTodosLeft = todos => {\r\n        return todos.filter(todo => !todo.complete).length\r\n    }\r\n\r\n    /*\r\n        Re-render the display by swapping the state based on button clicked \r\n        Display Todos will filter the display based on the state changed\r\n        changeFilter will also re-render and affect output of the display\r\n    */\r\n    const changeDisplay = args => {\r\n        if (args === 'all' || args === 'in progress' || args === 'complete') {\r\n            setState({\r\n                ...state,\r\n                display: args\r\n            })\r\n        }\r\n    }\r\n    const changeFilter = data => {\r\n        setState({\r\n            ...state,\r\n            filter: data\r\n        })\r\n    }\r\n    const displayTodos = () => {\r\n        let newTodos;\r\n        if (state.display === 'all') {\r\n            newTodos = state.todos\r\n        }\r\n        else if (state.display === 'in progress') {\r\n            newTodos = state.todos.filter(todo => !todo.complete)\r\n        }\r\n        else if (state.display === 'complete') {\r\n            newTodos = state.todos.filter(todo => todo.complete)\r\n        }\r\n        newTodos = newTodos.filter(todo => todo.text.toLowerCase().indexOf(state.filter) >= 0)\r\n        return newTodos\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Container class=\"d-flex flex-row\">\r\n            <h1>Todo List</h1>\r\n            {/* Inputs for adding and filtering ToDo lists */}\r\n            <TodoForm onSubmit={addTodo} date={new Date()}/>\r\n            <TodoFilter onChange={changeFilter} state={state} />\r\n            <h5>todos left: {checkTodosLeft(state.todos)}</h5>\r\n            {/* Button Features */}\r\n            <div class=\"d-flex justify-content-center \">\r\n                <Button style={{ margin: '1rem', width: '8rem' }} variant=\"outline-dark\" onClick={() => changeDisplay('all')}>Show All</Button>\r\n                <Button style={{ margin: '1rem', width: '8rem' }} variant=\"outline-info\" onClick={() => changeDisplay('in progress')}>In Progress</Button>\r\n                <Button style={{ margin: '1rem', width: '8rem' }} variant=\"outline-success\" onClick={() => changeDisplay('complete')}>Complete</Button>\r\n                <Button style={{ margin: '1rem', width: '8rem' }} variant=\"outline-danger\" onClick={handleShow}>Delete All</Button>\r\n            </div>\r\n            {/* Display all the demanded ToDo lists */}\r\n            <div class=\"d-flex flex-column\">\r\n                {displayTodos().map(todo =>\r\n                    <Todo\r\n                        key={todo.id}\r\n                        toggleComplete={() => toggleComplete(todo.id)}\r\n                        deleteTodo={() => deleteTodo(todo.id)}\r\n                        todo={todo}\r\n                    />\r\n                )}\r\n            </div>\r\n            {/* Modal for delete all ToDo lists */}\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Delete Confirmation</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure to delete all of your ToDo list?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>Cancel</Button>\r\n                    <Button variant=\"danger\" onClick={deleteAllTodo}>Delete</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <TodoList />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}